from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
from langchain_mcp_adapters.tools import load_mcp_tools
from langgraph.prebuilt import create_react_agent
from langchain_anthropic import ChatAnthropic
from dotenv import load_dotenv
import asyncio
import os

load_dotenv()

model = ChatAnthropic(
    model="claude-3-5-sonnet-20240620",
    max_tokens=6000,  # Limite la r√©ponse √† 6000 tokens
    temperature=0.1,  # R√©ponses plus pr√©cises  
    timeout=60.0      # Timeout apr√®s 60 secondes
)

server_params = StdioServerParameters(
    command="npx",
    env={
        "API_TOKEN": os.getenv("API_TOKEN"),
        "BROWSER_AUTH": os.getenv("BROWSER_AUTH"),
        "WEB_UNLOCKER_ZONE": os.getenv("WEB_UNLOCKER_ZONE"),
    },
    # Make sure to update to the full absolute path to your math_server.py file
    args=["@brightdata/mcp"],
)


async def chat_with_agent():
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()
            tools = await load_mcp_tools(session)
            agent = create_react_agent(model, tools)

            # Start conversation history
            messages = [
                {
                    "role": "system",
                    "content": """Tu es un assistant sp√©cialis√© dans l'aide aux nouveaux arrivants en France. 
                    
                    Tu aides les personnes qui viennent d'arriver sur diverses th√©matiques :
                    - üè• Sant√© (s√©curit√© sociale, m√©decins, urgences)
                    - üè† Logement (recherche, droits, aides au logement)
                    - üìã Administratif (cartes d'identit√©, permis, inscriptions)
                    - ‚öñÔ∏è Juridique (droits, d√©marches l√©gales, recours)
                    - üíº Emploi (recherche d'emploi, formations, droits du travail)
                    - üéì √âducation (inscriptions scolaires, universit√©s, formations)
                    - üöó Transport (permis de conduire, transports en commun)
                    - üí∞ Finances (banques, imp√¥ts, aides sociales)
                    
                    R√àGLES IMPORTANTES :
                    1. R√©ponds toujours en fran√ßais, de mani√®re claire et accessible
                    2. Utilise des outils de recherche pour obtenir des informations √† jour
                    3. OBLIGATOIRE : Cite TOUJOURS tes sources √† la fin de chaque r√©ponse
                    4. Structure tes r√©ponses avec des √©mojis et des sections claires
                    5. Propose des actions concr√®tes et des liens utiles
                    6. Pense √©tape par √©tape et utilise plusieurs outils si n√©cessaire
                    7. Sois empathique et rassurant
                    
                    Format de citation des sources :
                    üìö **Sources consult√©es :**
                    - [Nom du site/document] : URL ou r√©f√©rence
                    - [Autre source] : URL ou r√©f√©rence
                    """,
                }
            ]

            print("Type 'exit' or 'quit' to end the chat.")
            while True:
                user_input = input("\nYou: ")
                if user_input.strip().lower() in {"exit", "quit"}:
                    print("Goodbye!")
                    break

                # Add user message to history
                messages.append({"role": "user", "content": user_input})

                # Call the agent with the full message history
                agent_response = await agent.ainvoke({"messages": messages})

                # Extract agent's reply and add to history
                ai_message = agent_response["messages"][-1].content
                print(f"Agent: {ai_message}")


if __name__ == "__main__":
    asyncio.run(chat_with_agent())
