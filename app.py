from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
from langchain_mcp_adapters.tools import load_mcp_tools
from langgraph.prebuilt import create_react_agent
from langchain_anthropic import ChatAnthropic
from dotenv import load_dotenv
import asyncio
import os
import logging
from datetime import datetime

load_dotenv()

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)  # Permettre les requ√™tes cross-origin

# Configuration du mod√®le
model = ChatAnthropic(
    model="claude-3-5-sonnet-20240620",
    max_tokens=6000,  # Limite la r√©ponse √† 6000 tokens
    temperature=0.1,  # R√©ponses plus pr√©cises  
    timeout=60.0      # Timeout apr√®s 60 secondes
)

server_params = StdioServerParameters(
    command="npx",
    env={
        "API_TOKEN": os.getenv("API_TOKEN"),
        "BROWSER_AUTH": os.getenv("BROWSER_AUTH"),
        "WEB_UNLOCKER_ZONE": os.getenv("WEB_UNLOCKER_ZONE"),
        "NPM_CONFIG_LOGLEVEL": "silent",  # Logs npm compl√®tement silencieux
        "NPM_CONFIG_AUDIT": "false",      # D√©sactiver l'audit
        "NPM_CONFIG_FUND": "false",       # D√©sactiver les messages de financement
        "NPM_CONFIG_PROGRESS": "false",   # D√©sactiver la barre de progression
    },
    args=["--yes", "--silent", "--no-audit", "--no-fund", "--no-progress", "@brightdata/mcp@2.4.1"],
)

# Configuration des sites de r√©f√©rence par th√©matique
REFERENCE_SITES = {
    'logement': ['https://www.actionlogement.fr/'],
    'sante': [],  # √Ä d√©finir
    'administratif': [],  # √Ä d√©finir
    'juridique': [],  # √Ä d√©finir
    'emploi': [],  # √Ä d√©finir
    'education': [],  # √Ä d√©finir
    'transport': [],  # √Ä d√©finir
    'finances': []  # √Ä d√©finir
}

# Configuration des prompts par cat√©gorie
CATEGORY_PROMPTS = {
    'logement': {
        'title': 'üè† M√âTHODE SP√âCIFIQUE POUR LE LOGEMENT',
        'description': 'Tu DOIS utiliser EXCLUSIVEMENT le site de r√©f√©rence pr√©d√©fini',
        'site_label': 'SITE UNIQUE AUTORIS√â',
        'procedure': [
            'OBLIGATOIRE : Commencer par scraping_browser_navigate sur le site de r√©f√©rence',
            'Utiliser scraping_browser_links() pour identifier toutes les sections disponibles',
            'Naviguer vers les sections pertinentes avec scraping_browser_click',
            'Utiliser scrape_as_markdown sur les pages sp√©cifiques trouv√©es',
            'Explorer en profondeur : aides, formulaires, conditions d\'√©ligibilit√©',
            'INTERDIT : Utiliser search_engine ou d\'autres sites web'
        ],
        'workflow_example': {
            'question': 'Comment obtenir des aides au logement ?',
            'steps': [
                'scraping_browser_navigate(site_reference) pour charger le site',
                'scraping_browser_links() pour voir toutes les sections disponibles',
                'Identifier les sections "Aides", "Logement", "Formulaires"',
                'scraping_browser_click sur les liens pertinents',
                'scrape_as_markdown sur chaque page explor√©e',
                'Extraire les informations d√©taill√©es sur les aides',
                'R√©pondre avec les d√©tails trouv√©s et les liens directs'
            ]
        },
        'rules': [
            'OBLIGATOIRE : Commencer par scraping_browser_navigate',
            'Explorer TOUTES les sections pertinentes du site',
            'Ne pas se contenter de la page d\'accueil',
            'Chercher sp√©cifiquement : aides, formulaires, conditions',
            'Extraire les informations d√©taill√©es sur les aides disponibles',
            'Donner les liens directs vers les formulaires d\'aide',
            'Expliquer les conditions d\'√©ligibilit√© trouv√©es sur le site',
            'Utiliser UNIQUEMENT le site de r√©f√©rence'
        ]
    }
}

# Prompt de base r√©utilisable
BASE_PROMPT = """Tu es un assistant sp√©cialis√© dans l'aide aux nouveaux arrivants en France. 

Tu aides les personnes qui viennent d'arriver sur diverses th√©matiques :
- üè• Sant√© (s√©curit√© sociale, m√©decins, urgences)
- üè† Logement (recherche, droits, aides au logement)
- üìã Administratif (cartes d'identit√©, permis, inscriptions)
- ‚öñÔ∏è Juridique (droits, d√©marches l√©gales, recours)
- üíº Emploi (recherche d'emploi, formations, droits du travail)
- üéì √âducation (inscriptions scolaires, universit√©s, formations)
- üöó Transport (permis de conduire, transports en commun)
- üí∞ Finances (banques, imp√¥ts, aides sociales)

R√àGLES IMPORTANTES :
1. R√©ponds toujours en fran√ßais, de mani√®re claire et accessible
2. OBLIGATOIRE : Cite TOUJOURS tes sources √† la fin de chaque r√©ponse
3. OBLIGATOIRE : Formate ta r√©ponse en Markdown structur√© et propre
4. Propose des actions concr√®tes et des liens SP√âCIFIQUES (pas g√©n√©riques)
5. Donne des informations D√âTAILL√âES extraites du contenu scraped
6. Sois empathique et rassurant
7. Donne des liens directs vers les formulaires, pages sp√©cifiques, pas les pages d'accueil
8. Indique le nom exact des documents √† t√©l√©charger avec leurs URLs pr√©cises
9. OBLIGATOIRE : Explore les sites en profondeur, ne te contente pas de la page d'accueil
10. Utilise les outils de navigation pour trouver les informations sp√©cifiques

FORMAT MARKDOWN OBLIGATOIRE :
- Utilise des titres avec # ## ### pour structurer
- Utilise des listes √† puces - ou num√©rot√©es 1. 2. 3.
- Utilise **gras** pour les √©l√©ments importants
- Utilise `code` pour les noms de formulaires/documents
- Utilise > pour les citations importantes
- Utilise des tableaux | si n√©cessaire
- Utilise des √©mojis pour rendre visuellement agr√©able
- Structure logique : Titre principal ‚Üí Sous-sections ‚Üí √âtapes ‚Üí Sources

EXEMPLE DE STRUCTURE MARKDOWN :
```markdown
# üè• Titre Principal

## üìã Sous-section 1

### √âtapes √† suivre :
1. **Premi√®re √©tape** : Description d√©taill√©e
   - Point important
   - Autre d√©tail

2. **Deuxi√®me √©tape** : Description
   - √âl√©ment √† retenir

## ‚ö†Ô∏è Points importants

> **Attention** : Information cruciale √† retenir

## üìö Sources consult√©es

- [Nom PR√âCIS du document](URL-compl√®te)
- [Autre source sp√©cifique](URL-directe)
```

EXEMPLES de bons liens :
‚úÖ [Formulaire Cerfa n¬∞15186*03](https://www.service-public.fr/particuliers/vosdroits/R56618)
‚úÖ [Prise RDV Pr√©fecture Paris](https://www.rdv.paris.fr/prendre-rdv)
‚ùå √âviter : service-public.fr (trop g√©n√©rique)
"""

# Prompt pour m√©thode standard
STANDARD_METHOD_PROMPT = """

M√âTHODE DE RECHERCHE STANDARD (pour les autres th√©matiques) :
1. üîç TOUJOURS commencer par search_engine pour trouver les URLs pertinentes
2. üìÑ ENSUITE utiliser scrape_as_markdown sur les URLs officielles trouv√©es
3. üéØ Priorit√© aux sites : service-public.fr, ameli.fr, pole-emploi.fr, caf.fr, etc.
4. üìã Si scrape_as_markdown √©choue, utiliser scrape_as_html ou extract
5. ‚úÖ OBLIGATOIRE : R√©cup√©rer le contenu COMPLET des pages, pas juste les r√©sultats de recherche

STRAT√âGIE POUR SITES DYNAMIQUES :
Si scrape_as_markdown/scrape_as_html √©chouent ou retournent peu de contenu :
1. üåê Utiliser scraping_browser_navigate(URL) pour charger la page avec JavaScript
2. ‚è±Ô∏è Attendre que le contenu se charge (les outils attendent automatiquement)
3. üîó Utiliser scraping_browser_links() pour voir les √©l√©ments interactifs
4. üñ±Ô∏è Si n√©cessaire, utiliser scraping_browser_click(selector) pour interactions
5. üì± Ces outils g√®rent : JavaScript, React, Vue, Angular, contenu dynamique

EXEMPLE WORKFLOW STANDARD :
- Question: "Comment obtenir une carte vitale ?"
- √âtape 1: search_engine("carte vitale obtenir France")
- √âtape 2: scrape_as_markdown(https://www.service-public.fr/particuliers/vosdroits/F750)
- √âtape 3: Si peu de contenu ‚Üí scraping_browser_navigate(URL) pour JavaScript
- √âtape 4: Extraire les informations d√©taill√©es et formater la r√©ponse
"""

async def get_agent_response(user_message, context=None, category=None, max_retries=3):
    """Fonction pour obtenir la r√©ponse de l'agent avec retry automatique"""
    try:
        # V√©rifier la taille du message utilisateur
        if len(user_message) > 10000:  # ~7500 tokens approximativement
            return "‚ùå Votre message est trop long. Veuillez le raccourcir (maximum ~7500 tokens)."
        
        # G√©n√©rer le prompt syst√®me selon la cat√©gorie
        system_prompt = generate_system_prompt(category)
        
        for attempt in range(max_retries):
            try:
                async with stdio_client(server_params) as (read, write):
                    async with ClientSession(read, write) as session:
                        try:
                            await session.initialize()
                            tools = await load_mcp_tools(session)
                            agent = create_react_agent(model, tools)

                            # Messages avec prompt syst√®me dynamique
                            messages = [
                                {"role": "system", "content": system_prompt}
                            ]
                            
                            # Ajouter le contexte si fourni
                            if context:
                                messages.append({"role": "system", "content": f"Contexte suppl√©mentaire : {context}"})
                            
                            messages.append({"role": "user", "content": user_message})

                            # Log de la taille approximative des tokens
                            total_chars = sum(len(msg["content"]) for msg in messages)
                            estimated_tokens = total_chars // 4  # Approximation : 4 chars = 1 token
                            logger.info(f"üìä Estimation tokens input: ~{estimated_tokens}")

                            # Appel de l'agent
                            agent_response = await agent.ainvoke({"messages": messages})
                            
                            # Extraction de la r√©ponse
                            ai_message = agent_response["messages"][-1].content
                            
                            # Log de la taille de la r√©ponse
                            response_tokens = len(ai_message) // 4
                            logger.info(f"üìä Estimation tokens output: ~{response_tokens}")
                            
                            return ai_message
                    
                except Exception as mcp_error:
                    logger.error(f"Erreur MCP: {str(mcp_error)}")
                    error_msg = str(mcp_error).lower()
                    
                    if "List roots not supported" in str(mcp_error):
                        return "‚ùå Erreur de configuration MCP. Le serveur BrightData n'est pas compatible avec cette version. Veuillez contacter l'administrateur."
                    elif "529" in str(mcp_error) or "overloaded" in error_msg:
                        if attempt < max_retries - 1:
                            wait_time = (attempt + 1) * 2  # 2s, 4s, 6s
                            logger.warning(f"‚ö†Ô∏è Service surcharg√© (tentative {attempt + 1}/{max_retries}), attente de {wait_time}s...")
                            await asyncio.sleep(wait_time)
                            continue
                        else:
                            return "‚ùå Service temporairement surcharg√©. Le service de recherche web est actuellement tr√®s sollicit√©. Veuillez r√©essayer dans quelques minutes."
                    elif "rate" in error_msg or "limit" in error_msg:
                        if attempt < max_retries - 1:
                            wait_time = (attempt + 1) * 1  # 1s, 2s, 3s
                            logger.warning(f"‚ö†Ô∏è Rate limit atteint (tentative {attempt + 1}/{max_retries}), attente de {wait_time}s...")
                            await asyncio.sleep(wait_time)
                            continue
                        else:
                            return "‚ùå Limite de requ√™tes atteinte. Trop de demandes simultan√©es. Veuillez patienter quelques secondes et r√©essayer."
                    else:
                        raise mcp_error
                        
                # Si on arrive ici, la tentative a r√©ussi
                break
                
            except Exception as e:
                if attempt < max_retries - 1:
                    logger.warning(f"‚ö†Ô∏è Tentative {attempt + 1}/{max_retries} √©chou√©e: {str(e)}")
                    await asyncio.sleep(1)  # Attendre 1s entre les tentatives
                    continue
                else:
                    # Derni√®re tentative √©chou√©e
                    import traceback
                    logger.error(f"Erreur dans get_agent_response apr√®s {max_retries} tentatives: {str(e)}\n{traceback.format_exc()}")
                    error_msg = str(e).lower()
                    if "tokens" in error_msg or "context" in error_msg or "limit" in error_msg:
                        logger.error(f"‚ùå Erreur de tokens: {str(e)}")
                        return f"‚ùå Limite de tokens atteinte. Essayez une question plus courte ou plus sp√©cifique.\n\nD√©tails: {str(e)}"
                    elif "rate" in error_msg or "529" in error_msg:
                        logger.error(f"‚ùå Erreur de rate limiting: {str(e)}")
                        return f"‚ùå Trop de requ√™tes simultan√©es. Veuillez patienter quelques secondes et r√©essayer.\n\nD√©tails: {str(e)}"
                    elif "mcp" in error_msg or "brightdata" in error_msg:
                        logger.error(f"‚ùå Erreur MCP/BrightData: {str(e)}")
                        return f"‚ùå Erreur de configuration des outils de recherche web. Veuillez r√©essayer dans quelques instants.\n\nD√©tails: {str(e)}"
                    else:
                        logger.error(f"Erreur dans get_agent_response: {str(e)}")
                        return f"‚ùå Erreur lors du traitement de votre demande : {str(e)}\n\nVeuillez v√©rifier que vos cl√©s API sont correctement configur√©es dans le fichier .env"
                
    except Exception as e:
        import traceback
        logger.error(f"Erreur dans get_agent_response: {str(e)}\n{traceback.format_exc()}")
        error_msg = str(e).lower()
        if "tokens" in error_msg or "context" in error_msg or "limit" in error_msg:
            logger.error(f"‚ùå Erreur de tokens: {str(e)}")
            return f"‚ùå Limite de tokens atteinte. Essayez une question plus courte ou plus sp√©cifique.\n\nD√©tails: {str(e)}"
        elif "rate" in error_msg or "529" in error_msg:
            logger.error(f"‚ùå Erreur de rate limiting: {str(e)}")
            return f"‚ùå Trop de requ√™tes simultan√©es. Veuillez patienter quelques secondes et r√©essayer.\n\nD√©tails: {str(e)}"
        elif "mcp" in error_msg or "brightdata" in error_msg:
            logger.error(f"‚ùå Erreur MCP/BrightData: {str(e)}")
            return f"‚ùå Erreur de configuration des outils de recherche web. Veuillez r√©essayer dans quelques instants.\n\nD√©tails: {str(e)}"
        else:
            logger.error(f"Erreur dans get_agent_response: {str(e)}")
            return f"‚ùå Erreur lors du traitement de votre demande : {str(e)}\n\nVeuillez v√©rifier que vos cl√©s API sont correctement configur√©es dans le fichier .env"

def get_category_info(category_id):
    """R√©cup√®re les informations d'une cat√©gorie par son ID"""
    categories = {
        'sante': {
            'id': 'sante',
            'name': 'üè• Sant√©',
            'description': 'S√©curit√© sociale, m√©decins, urgences, carte vitale',
            'reference_sites': REFERENCE_SITES.get('sante', [])
        },
        'logement': {
            'id': 'logement',
            'name': 'üè† Logement',
            'description': 'Recherche, droits, aides au logement, CAF',
            'reference_sites': REFERENCE_SITES.get('logement', [])
        },
        'administratif': {
            'id': 'administratif',
            'name': 'üìã Administratif',
            'description': 'Cartes d\'identit√©, permis, inscriptions officielles',
            'reference_sites': REFERENCE_SITES.get('administratif', [])
        },
        'juridique': {
            'id': 'juridique',
            'name': '‚öñÔ∏è Juridique',
            'description': 'Droits, d√©marches l√©gales, recours',
            'reference_sites': REFERENCE_SITES.get('juridique', [])
        },
        'emploi': {
            'id': 'emploi',
            'name': 'üíº Emploi',
            'description': 'Recherche d\'emploi, formations, droits du travail',
            'reference_sites': REFERENCE_SITES.get('emploi', [])
        },
        'education': {
            'id': 'education',
            'name': 'üéì √âducation',
            'description': 'Inscriptions scolaires, universit√©s, formations',
            'reference_sites': REFERENCE_SITES.get('education', [])
        },
        'transport': {
            'id': 'transport',
            'name': 'üöó Transport',
            'description': 'Permis de conduire, transports en commun',
            'reference_sites': REFERENCE_SITES.get('transport', [])
        },
        'finances': {
            'id': 'finances',
            'name': 'üí∞ Finances',
            'description': 'Banques, imp√¥ts, aides sociales',
            'reference_sites': REFERENCE_SITES.get('finances', [])
        }
    }
    return categories.get(category_id)

def generate_system_prompt(category=None):
    """G√©n√®re le prompt syst√®me selon la cat√©gorie"""
    # Utiliser le prompt de base
    prompt = BASE_PROMPT
    
    # V√©rifier si la cat√©gorie a des sites de r√©f√©rence
    if category and category in REFERENCE_SITES and REFERENCE_SITES[category]:
        # G√©n√©rer le prompt sp√©cifique √† la cat√©gorie
        category_config = CATEGORY_PROMPTS.get(category, {})
        if category_config:
            sites = REFERENCE_SITES[category]
            sites_list = '\n'.join([f"- {site}" for site in sites])
            
            category_prompt = f"""

{category_config.get('title', f'üéØ M√âTHODE SP√âCIFIQUE POUR {category.upper()}')} :
{category_config.get('description', 'Tu DOIS utiliser EXCLUSIVEMENT le(s) site(s) de r√©f√©rence pr√©d√©fini(s)')} :

{category_config.get('site_label', 'SITE(S) AUTORIS√â(S)')} :
{sites_list}

PROC√âDURE OBLIGATOIRE :
"""
            # Ajouter les √©tapes de proc√©dure
            for i, step in enumerate(category_config.get('procedure', []), 1):
                category_prompt += f"{i}. üìÑ {step}\n"
            
            # Ajouter l'exemple de workflow
            workflow = category_config.get('workflow_example', {})
            if workflow:
                category_prompt += f"""
EXEMPLE WORKFLOW {category.upper()} :
- Question: "{workflow.get('question', 'Comment obtenir de l aide ?')}"
"""
                for i, step in enumerate(workflow.get('steps', []), 1):
                    # Remplacer les placeholders par les vrais sites
                    step = step.replace('site_reference', sites[0] if sites else 'URL_du_site')
                    category_prompt += f"- √âtape {i}: {step}\n"
            
            # Ajouter les r√®gles sp√©cifiques
            rules = category_config.get('rules', [])
            if rules:
                category_prompt += f"""
R√àGLES SP√âCIFIQUES {category.upper()} :
"""
                for rule in rules:
                    category_prompt += f"- {rule}\n"
        else:
            # Configuration par d√©faut si pas de config sp√©cifique
            sites = REFERENCE_SITES[category]
            sites_list = '\n'.join([f"- {site}" for site in sites])
            category_prompt = f"""

üéØ M√âTHODE SP√âCIFIQUE POUR {category.upper()} :
Tu DOIS utiliser EXCLUSIVEMENT le(s) site(s) de r√©f√©rence pr√©d√©fini(s) :

SITE(S) AUTORIS√â(S) :
{sites_list}

PROC√âDURE OBLIGATOIRE :
1. üåê OBLIGATOIRE : Commencer par scraping_browser_navigate sur le(s) site(s) de r√©f√©rence
2. üîó Utiliser scraping_browser_links() pour identifier toutes les sections disponibles
3. üñ±Ô∏è Naviguer vers les sections pertinentes avec scraping_browser_click
4. üìÑ Utiliser scrape_as_markdown sur les pages sp√©cifiques trouv√©es
5. üîç Explorer en profondeur : chercher les sections aides, formulaires, conditions
6. ‚ùå INTERDIT : Utiliser search_engine ou d'autres sites web

R√àGLES SP√âCIFIQUES :
- OBLIGATOIRE : Commencer par scraping_browser_navigate
- Explorer TOUTES les sections pertinentes du site
- Ne pas se contenter de la page d'accueil
- Chercher sp√©cifiquement : aides, formulaires, conditions d'√©ligibilit√©
- Extraire les informations d√©taill√©es disponibles
- Donner les liens directs vers les formulaires
- Expliquer les conditions trouv√©es sur le site
- Utiliser UNIQUEMENT le(s) site(s) de r√©f√©rence
"""
    else:
        # Utiliser la m√©thode standard
        category_prompt = STANDARD_METHOD_PROMPT
    
    return prompt + category_prompt

def add_reference_sites(category, sites):
    """Ajoute des sites de r√©f√©rence pour une cat√©gorie"""
    if category not in REFERENCE_SITES:
        REFERENCE_SITES[category] = []
    REFERENCE_SITES[category].extend(sites)

def add_category_prompt(category, config):
    """Ajoute une configuration de prompt pour une cat√©gorie"""
    CATEGORY_PROMPTS[category] = config

def get_available_categories():
    """Retourne la liste des cat√©gories disponibles avec leurs sites de r√©f√©rence"""
    return {
        category: {
            'info': get_category_info(category),
            'reference_sites': REFERENCE_SITES.get(category, []),
            'has_custom_prompt': category in CATEGORY_PROMPTS
        }
        for category in ['sante', 'logement', 'administratif', 'juridique', 'emploi', 'education', 'transport', 'finances']
    }

# ============ ROUTES WEB ============

@app.route('/')
def index():
    """Page d'accueil avec interface web"""
    return render_template('index.html')

# ============ API ENDPOINTS ============

@app.route('/api/status', methods=['GET'])
def api_status():
    """Endpoint pour v√©rifier le statut de l'API"""
    return jsonify({
        'status': 'active',
        'timestamp': datetime.now().isoformat(),
        'version': '1.0.0',
        'service': 'Assistant Nouveaux Arrivants France',
        'model_config': {
            'model': 'claude-3-5-sonnet-20240620',
            'max_tokens_output': 6000,
            'max_tokens_context': 200000,
            'temperature': 0.1,
            'timeout': '60s'
        },
        'token_limits': {
            'prompt_system_approx': '~2000 tokens',
            'user_message_max': '~7500 tokens', 
            'total_context_max': '200k tokens',
            'response_max': '6k tokens'
        },
        'retry_system': {
            'max_retries': 3,
            'overloaded_wait': '2s, 4s, 6s',
            'rate_limit_wait': '1s, 2s, 3s'
        }
    })

@app.route('/api/chat', methods=['POST'])
def api_chat():
    """Endpoint principal pour les conversations"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'Format JSON requis'}), 400
            
        user_message = data.get('message', '').strip()
        context = data.get('context', '')
        category = data.get('category', '')
        
        if not user_message:
            return jsonify({'error': 'Le champ "message" est requis et ne peut pas √™tre vide'}), 400
        
        # Log de la requ√™te
        logger.info(f"Nouvelle requ√™te chat: {user_message[:100]}... (cat√©gorie: {category})")
        
        # Construire le contexte enrichi avec la cat√©gorie
        enriched_context = context
        if category:
            category_info = get_category_info(category)
            if category_info:
                enriched_context = f"Cat√©gorie: {category_info['name']} - {category_info['description']}\n{context}".strip()
        
        # Ex√©cution asynchrone
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            response = loop.run_until_complete(get_agent_response(user_message, enriched_context, category))
            
            return jsonify({
                'success': True,
                'response': response,
                'timestamp': datetime.now().isoformat(),
                'category': category
            })
        finally:
            loop.close()
            
    except Exception as e:
        logger.error(f"Erreur dans api_chat: {str(e)}")
        return jsonify({
            'success': False,
            'error': f'Erreur serveur: {str(e)}'
        }), 500

@app.route('/api/categories', methods=['GET'])
def api_categories():
    """Endpoint pour obtenir les cat√©gories d'aide disponibles"""
    categories = [
        get_category_info('sante'),
        get_category_info('logement'),
        get_category_info('administratif'),
        get_category_info('juridique'),
        get_category_info('emploi'),
        get_category_info('education'),
        get_category_info('transport'),
        get_category_info('finances')
    ]
    
    return jsonify({
        'success': True,
        'categories': categories
    })

@app.route('/api/help', methods=['GET'])
def api_help():
    """Documentation de l'API"""
    endpoints = [
        {
            'endpoint': '/api/status',
            'method': 'GET',
            'description': 'V√©rifier le statut de l\'API'
        },
        {
            'endpoint': '/api/chat',
            'method': 'POST',
            'description': 'Envoyer un message √† l\'assistant',
            'parameters': {
                'message': 'string (requis) - Votre question',
                'context': 'string (optionnel) - Contexte suppl√©mentaire',
                'category': 'string (optionnel) - Cat√©gorie th√©matique (sante, logement, administratif, juridique, emploi, education, transport, finances)'
            },
            'example': {
                'message': 'Comment obtenir des aides au logement en tant que r√©fugi√© syrien ?',
                'context': 'Personne ayant obtenu le statut de r√©fugi√© ou protection internationale',
                'category': 'logement'
            }
        },
        {
            'endpoint': '/api/categories',
            'method': 'GET',
            'description': 'Obtenir la liste des cat√©gories d\'aide disponibles'
        },
        {
            'endpoint': '/api/reference-sites',
            'method': 'GET',
            'description': 'Obtenir la configuration des sites de r√©f√©rence par cat√©gorie'
        }
    ]
    
    return jsonify({
        'service': 'API Assistant Nouveaux Arrivants France',
        'version': '1.0.0',
        'endpoints': endpoints
    })

@app.route('/api/reference-sites', methods=['GET'])
def api_reference_sites():
    """Endpoint pour obtenir la configuration des sites de r√©f√©rence"""
    return jsonify({
        'success': True,
        'reference_sites': REFERENCE_SITES,
        'category_prompts': list(CATEGORY_PROMPTS.keys()),
        'categories': get_available_categories()
    })

# ============ COMPATIBILIT√â ANCIENNE API ============

@app.route('/chat', methods=['POST'])
def chat():
    """Ancien endpoint chat pour compatibilit√©"""
    user_message = request.json.get('message', '')
    
    if not user_message.strip():
        return jsonify({'error': 'Message vide'}), 400
    
    # Rediriger vers la nouvelle API
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        response = loop.run_until_complete(get_agent_response(user_message, category=None))
        return jsonify({'response': response})
    finally:
        loop.close()

# ============ GESTION D'ERREURS ============

@app.errorhandler(404)
def not_found(error):
    return jsonify({
        'error': 'Endpoint non trouv√©',
        'message': 'Consultez /api/help pour voir les endpoints disponibles'
    }), 404

@app.errorhandler(405)
def method_not_allowed(error):
    return jsonify({
        'error': 'M√©thode non autoris√©e',
        'message': 'V√©rifiez la m√©thode HTTP utilis√©e (GET/POST)'
    }), 405

@app.errorhandler(500)
def internal_error(error):
    return jsonify({
        'error': 'Erreur serveur interne',
        'message': 'Une erreur est survenue c√¥t√© serveur'
    }), 500

if __name__ == '__main__':
    logger.info("D√©marrage de l'API Assistant Nouveaux Arrivants France")
    
    # V√©rifier les variables d'environnement critiques
    required_env_vars = ['API_TOKEN', 'BROWSER_AUTH', 'WEB_UNLOCKER_ZONE']
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"‚ùå Variables d'environnement manquantes: {', '.join(missing_vars)}")
        logger.error("Veuillez configurer ces variables dans votre fichier .env ou dans les variables d'environnement Render")
        exit(1)
    
    logger.info("‚úÖ Toutes les variables d'environnement sont configur√©es")
    
    # Utiliser le port Render par d√©faut ou 8080 en local
    port = int(os.environ.get('PORT', 8080))
    logger.info(f"üåê D√©marrage sur le port {port}")
    
    app.run(host='0.0.0.0', debug=False, port=port) 