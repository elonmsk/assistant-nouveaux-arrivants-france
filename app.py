from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
from langchain_mcp_adapters.tools import load_mcp_tools
from langgraph.prebuilt import create_react_agent
from langchain_anthropic import ChatAnthropic
from dotenv import load_dotenv
import asyncio
import os
import logging
from datetime import datetime

load_dotenv()

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)  # Permettre les requ√™tes cross-origin

# Configuration du mod√®le
model = ChatAnthropic(
    model="claude-3-5-sonnet-20240620",
    max_tokens=6000,  # Limite la r√©ponse √† 6000 tokens
    temperature=0.1,  # R√©ponses plus pr√©cises  
    timeout=60.0      # Timeout apr√®s 60 secondes
)

server_params = StdioServerParameters(
    command="npx",
    env={
        "API_TOKEN": os.getenv("API_TOKEN"),
        "BROWSER_AUTH": os.getenv("BROWSER_AUTH"),
        "WEB_UNLOCKER_ZONE": os.getenv("WEB_UNLOCKER_ZONE"),
    },
    args=["@brightdata/mcp@2.4.1"],
)

# Prompt syst√®me enrichi
SYSTEM_PROMPT = """Tu es un assistant sp√©cialis√© dans l'aide aux nouveaux arrivants en France. 

Tu aides les personnes qui viennent d'arriver sur diverses th√©matiques :
- üè• Sant√© (s√©curit√© sociale, m√©decins, urgences)
- üè† Logement (recherche, droits, aides au logement)
- üìã Administratif (cartes d'identit√©, permis, inscriptions)
- ‚öñÔ∏è Juridique (droits, d√©marches l√©gales, recours)
- üíº Emploi (recherche d'emploi, formations, droits du travail)
- üéì √âducation (inscriptions scolaires, universit√©s, formations)
- üöó Transport (permis de conduire, transports en commun)
- üí∞ Finances (banques, imp√¥ts, aides sociales)

M√âTHODE DE RECHERCHE OBLIGATOIRE :
1. üîç TOUJOURS commencer par search_engine pour trouver les URLs pertinentes
2. üìÑ ENSUITE utiliser scrape_as_markdown sur les URLs officielles trouv√©es
3. üéØ Priorit√© aux sites : service-public.fr, ameli.fr, pole-emploi.fr, caf.fr, etc.
4. üìã Si scrape_as_markdown √©choue, utiliser scrape_as_html ou extract
5. ‚úÖ OBLIGATOIRE : R√©cup√©rer le contenu COMPLET des pages, pas juste les r√©sultats de recherche

STRAT√âGIE POUR SITES DYNAMIQUES :
Si scrape_as_markdown/scrape_as_html √©chouent ou retournent peu de contenu :
1. üåê Utiliser scraping_browser_navigate(URL) pour charger la page avec JavaScript
2. ‚è±Ô∏è Attendre que le contenu se charge (les outils attendent automatiquement)
3. üîó Utiliser scraping_browser_links() pour voir les √©l√©ments interactifs
4. üñ±Ô∏è Si n√©cessaire, utiliser scraping_browser_click(selector) pour interactions
5. üì± Ces outils g√®rent : JavaScript, React, Vue, Angular, contenu dynamique

SITES PROBL√âMATIQUES COURANTS :
- Sites gouvernementaux avec JavaScript : utiliser scraping_browser_navigate
- Formulaires dynamiques : scraping_browser_click pour navigation
- Contenu charg√© par AJAX : les outils navigateur attendent le chargement
- Sites avec authentification : scraping_browser peut g√©rer les cookies

R√àGLES IMPORTANTES :
1. R√©ponds toujours en fran√ßais, de mani√®re claire et accessible
2. WORKFLOW OBLIGATOIRE : search_engine ‚Üí scrape_as_markdown ‚Üí (si √©chec: scraping_browser_navigate) ‚Üí r√©ponse structur√©e
3. OBLIGATOIRE : Cite TOUJOURS tes sources √† la fin de chaque r√©ponse
4. OBLIGATOIRE : Formate ta r√©ponse en Markdown structur√© et propre
5. Propose des actions concr√®tes et des liens SP√âCIFIQUES (pas g√©n√©riques)
6. Donne des informations D√âTAILL√âES extraites du contenu scraped
7. Sois empathique et rassurant
8. Donne des liens directs vers les formulaires, pages sp√©cifiques, pas les pages d'accueil
9. Indique le nom exact des documents √† t√©l√©charger avec leurs URLs pr√©cises

EXEMPLE DE WORKFLOW :
- Question: "Comment obtenir une carte vitale ?"
- √âtape 1: search_engine("carte vitale obtenir France")
- √âtape 2: scrape_as_markdown(https://www.service-public.fr/particuliers/vosdroits/F750)
- √âtape 3: Si peu de contenu ‚Üí scraping_browser_navigate(URL) pour JavaScript
- √âtape 4: Extraire les informations d√©taill√©es et formater la r√©ponse

EXEMPLE SITE DYNAMIQUE :
- Question: "Comment s'inscrire sur Parcoursup ?"
- √âtape 1: search_engine("Parcoursup inscription √©tapes")
- √âtape 2: scrape_as_markdown √©choue (site React)
- √âtape 3: scraping_browser_navigate(https://www.parcoursup.fr)
- √âtape 4: scraping_browser_links() pour voir les sections
- √âtape 5: Extraire le contenu complet et r√©pondre

FORMAT MARKDOWN OBLIGATOIRE :
- Utilise des titres avec # ## ### pour structurer
- Utilise des listes √† puces - ou num√©rot√©es 1. 2. 3.
- Utilise **gras** pour les √©l√©ments importants
- Utilise `code` pour les noms de formulaires/documents
- Utilise > pour les citations importantes
- Utilise des tableaux | si n√©cessaire
- Utilise des √©mojis pour rendre visuellement agr√©able
- Structure logique : Titre principal ‚Üí Sous-sections ‚Üí √âtapes ‚Üí Sources

EXEMPLE DE STRUCTURE MARKDOWN :
```markdown
# üè• Titre Principal

## üìã Sous-section 1

### √âtapes √† suivre :
1. **Premi√®re √©tape** : Description d√©taill√©e
   - Point important
   - Autre d√©tail

2. **Deuxi√®me √©tape** : Description
   - √âl√©ment √† retenir

## ‚ö†Ô∏è Points importants

> **Attention** : Information cruciale √† retenir

## üìö Sources consult√©es

- [Nom PR√âCIS du document](URL-compl√®te)
- [Autre source sp√©cifique](URL-directe)
```

EXEMPLES de bons liens :
‚úÖ [Formulaire Cerfa n¬∞15186*03](https://www.service-public.fr/particuliers/vosdroits/R56618)
‚úÖ [Prise RDV Pr√©fecture Paris](https://www.rdv.paris.fr/prendre-rdv)
‚ùå √âviter : service-public.fr (trop g√©n√©rique)
"""

async def get_agent_response(user_message, context=None):
    """Fonction pour obtenir la r√©ponse de l'agent"""
    try:
        # V√©rifier la taille du message utilisateur
        if len(user_message) > 10000:  # ~7500 tokens approximativement
            return "‚ùå Votre message est trop long. Veuillez le raccourcir (maximum ~7500 tokens)."
        
        async with stdio_client(server_params) as (read, write):
            async with ClientSession(read, write) as session:
                try:
                    await session.initialize()
                    tools = await load_mcp_tools(session)
                    agent = create_react_agent(model, tools)

                    # Messages avec prompt syst√®me
                    messages = [
                        {"role": "system", "content": SYSTEM_PROMPT}
                    ]
                    
                    # Ajouter le contexte si fourni
                    if context:
                        messages.append({"role": "system", "content": f"Contexte suppl√©mentaire : {context}"})
                    
                    messages.append({"role": "user", "content": user_message})

                    # Log de la taille approximative des tokens
                    total_chars = sum(len(msg["content"]) for msg in messages)
                    estimated_tokens = total_chars // 4  # Approximation : 4 chars = 1 token
                    logger.info(f"üìä Estimation tokens input: ~{estimated_tokens}")

                    # Appel de l'agent
                    agent_response = await agent.ainvoke({"messages": messages})
                    
                    # Extraction de la r√©ponse
                    ai_message = agent_response["messages"][-1].content
                    
                    # Log de la taille de la r√©ponse
                    response_tokens = len(ai_message) // 4
                    logger.info(f"üìä Estimation tokens output: ~{response_tokens}")
                    
                    return ai_message
                    
                except Exception as mcp_error:
                    logger.error(f"Erreur MCP: {str(mcp_error)}")
                    if "List roots not supported" in str(mcp_error):
                        return "‚ùå Erreur de configuration MCP. Le serveur BrightData n'est pas compatible avec cette version. Veuillez contacter l'administrateur."
                    else:
                        raise mcp_error
                
    except Exception as e:
        import traceback
        logger.error(f"Erreur dans get_agent_response: {str(e)}\n{traceback.format_exc()}")
        error_msg = str(e).lower()
        if "tokens" in error_msg or "context" in error_msg or "limit" in error_msg:
            logger.error(f"‚ùå Erreur de tokens: {str(e)}")
            return f"‚ùå Limite de tokens atteinte. Essayez une question plus courte ou plus sp√©cifique.\n\nD√©tails: {str(e)}"
        elif "rate" in error_msg or "529" in error_msg:
            logger.error(f"‚ùå Erreur de rate limiting: {str(e)}")
            return f"‚ùå Trop de requ√™tes simultan√©es. Veuillez patienter quelques secondes et r√©essayer.\n\nD√©tails: {str(e)}"
        elif "mcp" in error_msg or "brightdata" in error_msg:
            logger.error(f"‚ùå Erreur MCP/BrightData: {str(e)}")
            return f"‚ùå Erreur de configuration des outils de recherche web. Veuillez r√©essayer dans quelques instants.\n\nD√©tails: {str(e)}"
        else:
            logger.error(f"Erreur dans get_agent_response: {str(e)}")
            return f"‚ùå Erreur lors du traitement de votre demande : {str(e)}\n\nVeuillez v√©rifier que vos cl√©s API sont correctement configur√©es dans le fichier .env"

# ============ ROUTES WEB ============

@app.route('/')
def index():
    """Page d'accueil avec interface web"""
    return render_template('index.html')

# ============ API ENDPOINTS ============

@app.route('/api/status', methods=['GET'])
def api_status():
    """Endpoint pour v√©rifier le statut de l'API"""
    return jsonify({
        'status': 'active',
        'timestamp': datetime.now().isoformat(),
        'version': '1.0.0',
        'service': 'Assistant Nouveaux Arrivants France',
        'model_config': {
            'model': 'claude-3-5-sonnet-20240620',
            'max_tokens_output': 6000,
            'max_tokens_context': 200000,
            'temperature': 0.1,
            'timeout': '60s'
        },
        'token_limits': {
            'prompt_system_approx': '~2000 tokens',
            'user_message_max': '~7500 tokens', 
            'total_context_max': '200k tokens',
            'response_max': '6k tokens'
        }
    })

@app.route('/api/chat', methods=['POST'])
def api_chat():
    """Endpoint principal pour les conversations"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': 'Format JSON requis'}), 400
            
        user_message = data.get('message', '').strip()
        context = data.get('context', '')
        
        if not user_message:
            return jsonify({'error': 'Le champ "message" est requis et ne peut pas √™tre vide'}), 400
        
        # Log de la requ√™te
        logger.info(f"Nouvelle requ√™te chat: {user_message[:100]}...")
        
        # Ex√©cution asynchrone
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            response = loop.run_until_complete(get_agent_response(user_message, context))
            
            return jsonify({
                'success': True,
                'response': response,
                'timestamp': datetime.now().isoformat()
            })
        finally:
            loop.close()
            
    except Exception as e:
        logger.error(f"Erreur dans api_chat: {str(e)}")
        return jsonify({
            'success': False,
            'error': f'Erreur serveur: {str(e)}'
        }), 500

@app.route('/api/categories', methods=['GET'])
def api_categories():
    """Endpoint pour obtenir les cat√©gories d'aide disponibles"""
    categories = [
        {
            'id': 'sante',
            'name': 'üè• Sant√©',
            'description': 'S√©curit√© sociale, m√©decins, urgences, carte vitale'
        },
        {
            'id': 'logement',
            'name': 'üè† Logement',
            'description': 'Recherche, droits, aides au logement, CAF'
        },
        {
            'id': 'administratif',
            'name': 'üìã Administratif',
            'description': 'Cartes d\'identit√©, permis, inscriptions officielles'
        },
        {
            'id': 'juridique',
            'name': '‚öñÔ∏è Juridique',
            'description': 'Droits, d√©marches l√©gales, recours'
        },
        {
            'id': 'emploi',
            'name': 'üíº Emploi',
            'description': 'Recherche d\'emploi, formations, droits du travail'
        },
        {
            'id': 'education',
            'name': 'üéì √âducation',
            'description': 'Inscriptions scolaires, universit√©s, formations'
        },
        {
            'id': 'transport',
            'name': 'üöó Transport',
            'description': 'Permis de conduire, transports en commun'
        },
        {
            'id': 'finances',
            'name': 'üí∞ Finances',
            'description': 'Banques, imp√¥ts, aides sociales'
        }
    ]
    
    return jsonify({
        'success': True,
        'categories': categories
    })

@app.route('/api/help', methods=['GET'])
def api_help():
    """Documentation de l'API"""
    endpoints = [
        {
            'endpoint': '/api/status',
            'method': 'GET',
            'description': 'V√©rifier le statut de l\'API'
        },
        {
            'endpoint': '/api/chat',
            'method': 'POST',
            'description': 'Envoyer un message √† l\'assistant',
            'parameters': {
                'message': 'string (requis) - Votre question',
                'context': 'string (optionnel) - Contexte suppl√©mentaire'
            },
            'example': {
                'message': 'Comment obtenir une carte vitale ?',
                'context': 'Je viens d\'arriver d\'Allemagne'
            }
        },
        {
            'endpoint': '/api/categories',
            'method': 'GET',
            'description': 'Obtenir la liste des cat√©gories d\'aide disponibles'
        }
    ]
    
    return jsonify({
        'service': 'API Assistant Nouveaux Arrivants France',
        'version': '1.0.0',
        'endpoints': endpoints
    })

# ============ COMPATIBILIT√â ANCIENNE API ============

@app.route('/chat', methods=['POST'])
def chat():
    """Ancien endpoint chat pour compatibilit√©"""
    user_message = request.json.get('message', '')
    
    if not user_message.strip():
        return jsonify({'error': 'Message vide'}), 400
    
    # Rediriger vers la nouvelle API
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        response = loop.run_until_complete(get_agent_response(user_message))
        return jsonify({'response': response})
    finally:
        loop.close()

# ============ GESTION D'ERREURS ============

@app.errorhandler(404)
def not_found(error):
    return jsonify({
        'error': 'Endpoint non trouv√©',
        'message': 'Consultez /api/help pour voir les endpoints disponibles'
    }), 404

@app.errorhandler(405)
def method_not_allowed(error):
    return jsonify({
        'error': 'M√©thode non autoris√©e',
        'message': 'V√©rifiez la m√©thode HTTP utilis√©e (GET/POST)'
    }), 405

@app.errorhandler(500)
def internal_error(error):
    return jsonify({
        'error': 'Erreur serveur interne',
        'message': 'Une erreur est survenue c√¥t√© serveur'
    }), 500

if __name__ == '__main__':
    logger.info("D√©marrage de l'API Assistant Nouveaux Arrivants France")
    
    # V√©rifier les variables d'environnement critiques
    required_env_vars = ['API_TOKEN', 'BROWSER_AUTH', 'WEB_UNLOCKER_ZONE']
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"‚ùå Variables d'environnement manquantes: {', '.join(missing_vars)}")
        logger.error("Veuillez configurer ces variables dans votre fichier .env ou dans les variables d'environnement Render")
        exit(1)
    
    logger.info("‚úÖ Toutes les variables d'environnement sont configur√©es")
    
    # Utiliser le port Render par d√©faut ou 8080 en local
    port = int(os.environ.get('PORT', 8080))
    logger.info(f"üåê D√©marrage sur le port {port}")
    
    app.run(host='0.0.0.0', debug=False, port=port) 